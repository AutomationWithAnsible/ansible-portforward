#!/bin/bash
# Version: 0.10
#
# Portforward script to interface with IPTABLE
#
# Author Adham helal (aahelal@hotmail.com)
# 
#
#	Install on ubuntu 12.04 :
#			copy script to /etc/init.d/ 
#			sudo update-rc.d portfrwd  defaults 99 20
#
#
#  TODO:
#       - Make a cache copy of /etc/portforward.conf to compare before restart so to avoid having dead rules
#       - Return 1 and 0 on failure 
#		- Do more parsing checks and logic checks 
#  		

# Conf file 
PortForwad="/etc/portforward.conf"
#Not used for now
ServerIP=""
#
resolvedIP=""

### Rules
## Check/Add/Delete
IP_C="iptables  -C "
IP_A="iptables  -I "
IP_D="iptables  -D "

##Rules Prerouting and forward

#  interfaces ( i.e. eth0)  %INTERFACE% 
#  localport to forward from   %LOCALPORT% 
#  destination ip %DESTIP%
#  destination port %DESTPORT%
#  $ServerIP this server IP %SERVERIP%

#NAT
rnPRER="PREROUTING -t nat  -i %INTERFACE% -p tcp --dport %LOCALPORT% -j DNAT --to %DESTIP%:%DESTPORT%"
rnFRWD="FORWARD -p tcp -d %DESTIP% --dport %DESTPORT%  -i %INTERFACE%  -j ACCEPT"

#masq
rmPRER="PREROUTING -t nat -p tcp --dport %LOCALPORT% -j DNAT --to-destination  %DESTIP%:%DESTPORT%"
rmPOST="POSTROUTING -t nat  -p tcp --dport %DESTPORT%  -d %DESTIP% -j MASQUERADE "
rmFRWD="FORWARD -p tcp -d %DESTIP% --dport %DESTPORT%  -i %INTERFACE%  -j ACCEPT"
rmFLOG="FORWARD -p tcp -d %DESTIP% --dport %DESTPORT%  -i %INTERFACE% -m state --state NEW -j LOG --log-prefix NewConnectionMasq: "
#Only root can run
if [ `id -u` -ne 0 ]; then
	echo "You need root privileges to run this script"
	exit 1
fi

function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    resolvedIP=$1
    #echo "IP is $1"
    return $stat
}

function valid_host(){
        if  valid_ip $1 ; then
                return 0
        else
                #Check if hostname
                hostname=`getent ahostsv4 $1 | head -1 | awk '{print $1}'`
                if [ -z $hostname ]; then return 1; fi
                valid_ip $hostname
                return $?
        fi
}


iptableFlush() {
    echo ">> Warning Flushing all rules. Will erase all rules."
    while true; do
    read -p "Do you wish to proceed (Y/N)" yn
    case $yn in
        [Yy]* )  break;;
        [Nn]* ) exit;;
        * ) echo "Please answer yes or no.";;
    esac
	done
    iptables -F
    iptables -X
    iptables -t nat -F
    iptables -t nat -X
    iptables -t mangle -F
    iptables -t mangle -X
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT

}
checkSysctl(){
    status=`cat /proc/sys/net/ipv4/ip_forward`
    if [ "$status" -ne 1 ]; then     
        echo " Forwarding not enabled by default. "
        echo " Trying to enable it"
        sysctl net.ipv4.ip_forward=1   
    fi
}


# Create prerouting and forward rules
# Arguments
# $1 m or n 
# $2 interfaces ( i.e. eth0) 
# $3 localport to forward from 
# $4 destination ip
# $5 destination port
# $6 debug
iptableCreateRule(){
    #Check if rules are in table to avoid duplicates 
    iptableCheckRule $1 $2 $3 $4 $5 "Y"
    status=$?
	if [ "$status" -eq 0 ]; then
		if [ "$1" == "n" ]; then
#			xrnPRER=`echo $rnPRER | sed -e 's/%INTERFACE%/'$1'/g;s/%LOCALPORT%/'$2'/g;s/%DESTIP%/'$3'/g;s/%DESTPORT%/'$4'/g;s/%SERVERIP%/'$ServerIP'/g;s/%DESTPORT%/'$4'/g'`
#		    xrnFRWD=`echo $rnFRWD | sed -e 's/%INTERFACE%/'$1'/g;s/%LOCALPORT%/'$2'/g;s/%DESTIP%/'$3'/g;s/%DESTPORT%/'$4'/g;s/%SERVERIP%/'$ServerIP'/g;s/%DESTPORT%/'$4'/g'`
			xrnPRER=`echo $rnPRER | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
		    xrnFRWD=`echo $rnFRWD | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
    	    echo "Adding rule $2:$3 ---> $4:$5"
        	${IP_A} ${xrnPRER} 
	        ${IP_A} ${xrnFRWD}
    		#debug
	    	if [ "$6" == "debug" ]; then        
    	       echo "(nat PreRoute) $IP_A $xrnPRER"
        	   echo "(nat Forward)  $IP_A $xrnFRWD"
		    fi
		elif [ "$1" == "m" ]; then
			xrmPRER=`echo $rmPRER | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
		   	xrmPOST=`echo $rmPOST | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
		    xrmFRWD=`echo $rmFRWD | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
		    xrmFLOG=`echo $rmFLOG | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
    	    echo "Adding masq rule $2:$3 ---> $4:$5"
        	${IP_A} ${xrmPRER} 
        	${IP_A} ${xrmPOST} 
	        ${IP_A} ${xrmFRWD}
	        ${IP_A} ${xrmFLOG}	        
    		#debug
	    	if [ "$6" == "debug" ]; then        
    	       echo " (masq PreRoute)  $IP_A $xrmPRER"
    	       echo " (masq PostRoute) $IP_A $xrmPOST"
        	   echo " (masq Forward)   $IP_A $xrmFRWD"
        	   echo " (masq LOG)       $IP_A $xrmFLOG"           	   
		    fi
		fi
	else
    	echo "* Ignoring rules; Rule is in table $2:$3 ---> $4:$5"
	fi	
}
# Delete rules
# Arguments
# $1 m or n 
# $2 interfaces ( i.e. eth0) 
# $3 localport to forward from 
# $4 destination ip
# $5 destination port
# $6 debug
# $4 destination port
iptableDeleteRule(){
    iptableCheckRule $1 $2 $3 $4 $5 "Y"
    status=$?
	if [ "$status" -eq 1 ]; then
		if [ "$1" == "n" ]; then
			xrnPRER=`echo $rnPRER | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
		    xrnFRWD=`echo $rnFRWD | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
    	    echo "Deleting nat rule $2:$3 ---> $4:$5"
        	${IP_D} ${xrnPRER} 
	        ${IP_D} ${xrnFRWD}
    		#debug
	    	if [ "$6" == "debug" ]; then        
    	       echo "(nat PreRoute) $IP_D $xrnPRER"
        	   echo "(nat Forward)  $IP_D $xrnFRWD"
		    fi
		elif [ "$1" == "m" ]; then
			xrmPRER=`echo $rmPRER | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
		   	xrmPOST=`echo $rmPOST | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
		    xrmFRWD=`echo $rmFRWD | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
		    xrmFLOG=`echo $rmFLOG | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
    	    echo "Deleting masq rule $2:$3 ---> $4:$5"
        	${IP_D} ${xrmPRER} 
        	${IP_D} ${xrmPOST} 
	        ${IP_D} ${xrmFRWD}
	        ${IP_D} ${xrmFLOG}	        	        
    		#debug
	    	if [ "$6" == "debug" ]; then        
    	       echo " (masq PreRoute)  $IP_D $xrmPRER"
    	       echo " (masq PostRoute) $IP_D $xrmPOST"
        	   echo " (masq Forward)   $IP_D $xrmFRWD"
        	   echo " (masq LOG)       $IP_D $xrmFLOG"        	   
		    fi
		fi
	else
    	echo "* Ignoring rules; Rule is in table $2:$3 ---> $4:$5"
	fi	

}

# Check rules
# Arguments
# $1 m or n 
# $2 interfaces ( i.e. eth0) 
# $3 localport to forward from 
# $4 destination ip
# $5 destination port
# $6 Y dont print return 0 if rule is not in table or 1 if rule is in table
iptableCheckRule(){

	if [ "$1" == "n" ]; then
		xrnPRER=`echo $rnPRER | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
    	xrnFRWD=`echo $rnFRWD | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
    	#Check if rules are in table to avoid duplicates 
    	${IP_C} ${xrnPRER} 2> /dev/null    
    	statusP="$?"
    	${IP_C} ${xrnFRWD} 2> /dev/null    
    	statusF="$?"    	
    	if [ "$statusP" -eq 1 ] || [ "$statusF" -eq 1 ] ; then
    		if [ ! -z $6 ]; then
				return 0
			else
        		echo -e ' \t   ' "[NOT] in tables $1)$2:$3 ---> $4:$5"
        	fi
    	else		
    		if [ ! -z $6 ]; then
				return 1
			else
        		echo -e ' \t   ' "[Yes] in tables $1)$2:$3 ---> $4:$5"
        	fi
    	fi
	elif [ "$1" == "m" ]; then
		xrmPRER=`echo $rmPRER | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
		xrmPOST=`echo $rmPOST | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
		xrmFRWD=`echo $rmFRWD | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`
		xrmFLOG=`echo $rmFLOG | sed -e 's/%INTERFACE%/'$2'/g;s/%LOCALPORT%/'$3'/g;s/%DESTIP%/'$4'/g;s/%DESTPORT%/'$5'/g;s/%SERVERIP%/'$ServerIP'/g'`		
    	#Check if rules are in table to avoid duplicates 
    	${IP_C} ${xrmPRER} 2> /dev/null    
    	statusP="$?"
		${IP_C} ${xrmPOST} 2> /dev/null    
    	statusT="$?"
    	${IP_C} ${xrmFRWD} 2> /dev/null    
    	statusF="$?"    	
		${IP_C} ${xrmFLOG} 2> /dev/null    
    	statusL="$?"    	
    	
    	if [ "$statusP" -eq 1 ] || [ "$statusF" -eq 1 ] || [ "$statusT" -eq 1 ]  || [ "$statusL" -eq 1 ]; then
    		if [ ! -z $6 ]; then
				return 0
			else
        		echo -e ' \t   ' "[NOT] in tables $1)$2:$3 ---> $4:$5"
        	fi
    	else		
    		if [ ! -z $6 ]; then
				return 1
			else
        		echo -e ' \t   ' "[Yes] in tables $1)$2:$3 ---> $4:$5"
        	fi
    	fi
	else
		if [ ! -z $6 ]; then
			return 2
		else
			echo " [Error] Unsupported forward type '$1'"
		fi
	fi


}


#
# Reads a file and parses the lines and runs the rules
# File syntax [Interface     Localport       Destination IP          Destination Port        Comment]
# Argument $1 file path  $2 action [ "check" | "add" |  "delete" ]
ParseFile (){
    fileToParse=$1
    action=$2
    debug=$3
    if [ -f $fileToParse ]; then
        while  read -r  -a rules
        do
            STR=${rules[0]}
            if [ "${STR:0:1}" != "#" ]; then
                if [ -z ${rules[0]} ] || [ -z ${rules[1]} ] || [ -z ${rules[2]} ] || [ -z ${rules[3]} ] || [ -z ${rules[4]} ] ; then
					echo "> Parse Rule =  Error ignored: ${rules[0]}-${rules[1]}-${rules[2]}-${rules[3]}-${rules[4]}"
                else
                	#Check rules
                	#Check ip
                	if ! valid_host ${rules[3]} ; then echo " ! Error incorrect Hostname/IP ${rules[3]}"; fi 
                    case $action in
                    add)
                        iptableCreateRule ${rules[0]} ${rules[1]} ${rules[2]}  $resolvedIP ${rules[4]} $debug
                    ;;
                    del)
                        iptableDeleteRule ${rules[0]} ${rules[1]} ${rules[2]} $resolvedIP ${rules[4]} $debug
                    ;;
                    check)   
                        echo -n "> Parse Rule = ${rules[0]}-${rules[1]}-${rules[2]}-${rules[3]}-${rules[4]}"
                        iptableCheckRule ${rules[0]} ${rules[1]} ${rules[2]} $resolvedIP ${rules[4]}
                    ;;
                    esac
                fi
            fi
        done < $1
    else
        echo "Error - unable to find file $1 to parse"
    fi
}


case $1 in
start)
    checkSysctl
    echo "Starting Firewall Port forward"
    ParseFile $PortForwad add $2
;;
stop)
    echo "Stopping Firewall Port forward"
    ParseFile $PortForwad del $2
;;
restart)
	$0 stop
	$0 start
;;
flush)
    iptableFlush
;;
list)
    iptables -t nat -L  --line-numbers
    iptables -L -v -n --line-numbers
;;
status)
    ParseFile $PortForwad check
;;
*) echo "$0 Options start | stop | restart | flush | list | status"
   ;;
esac
exit 0

